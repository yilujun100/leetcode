/**
 * 1021. 删除最外层的括号
 * 输入："(()())(())"
 * 输出："()()()"
 * 输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())",
 * 删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
 */

// 解题思路：
// 如何判断某一部分是独立的括号部分？
// 统计左右括号的差值，当差值为0，就代表括号是独立的部分
export default S => {
	const result = [];
	// pre: 原语化分解后起始位
	// cnt: 记录左右括号的差值（可以理解为栈顶指针）
	for (let i = 0, pre = 0, cnt = 0; i < S.length; i++) {
		if (S[i] === '(') {
			// 遇到左括号 + 1
			cnt += 1;
		} else {
			// 遇到右括号 -1
			cnt -= 1;
		}
		if (cnt !== 0) continue; // 如果cnt不等于0，那么什么也不用做
		// 如果cnt为0，提取拆解部分的子串
		result.push(S.substr(pre + 1, i - pre - 1));
		pre = i + 1;
	}
	return result.join('');
};
